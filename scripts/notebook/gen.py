"""
    Credits to : Tiagosf00
    https://github.com/Tiagosf00/Competitive-Programming
"""
import os
import subprocess
import shutil
import argparse
from typing import Tuple, List
from pathlib import Path


def get_dir():
    section_list = os.listdir(ALGO_PATH)
    section = []
    for section_name in section_list:
        if not valid_algo_section(section_name):
            continue
        print(section_name)
        sec_list: List[Tuple[str, str]] = []
        section_path = ALGO_PATH / section_name
        items = os.listdir(section_path)
        for file_name in items:
            print(file_name)
            if validCode(file_name, [".py", ".cpp"]):
                sec_list.append(
                    (
                        file_name,
                        (ALGO_PATH / section_name / file_name).absolute().__str__(),
                    )
                )

        sec_list.sort()
        section.append((section_name, sec_list))

    # Adds settings and macros to notebook
    section.sort()
    conf_files: List[Tuple[str, str]] = []
    for conf in os.listdir(confpath):
        conf_files.append((conf, (confpath / conf).absolute().__str__()))

    section.append(("Settings and Macros", conf_files))

    return section


# Get the path from the command line
parser = argparse.ArgumentParser(description="Create notebook from C++ files.")
parser.add_argument(
    "--path", type=str, default="algorithms/", help="Path to implementation paths"
)

parser.add_argument(
    "--confpath", type=str, default="settings/", help="Path to settings and macros"
)

parser.add_argument(
    "--teamname", type=str, default="", help="Name of the team the notebook belongs to"
)
args = parser.parse_args()
ALGO_PATH = Path(args.path)
confpath = Path(args.confpath)
team_name = args.teamname


ALGO_SECT_IGNORE = ["extras"]
CMD_GEN_PDF = "pdflatex -interaction=nonstopmode -halt-on-error "
END_FLUSHLEFT = "\n\\end{flushleft}"
END_MULTICOLS = "\n\\end{multicols}\n"
END_DOCUMENT = "\n\\end{document}\n"


def change_team_name(path: str, team_name: str):
    with open(path, 'r') as file:
        file_contents = file.read()

    modified_contents = file_contents.replace("teamname", team_name)

    with open(path, 'w') as file:
        file.write(modified_contents)


def cpy_template():
    # gets the path from the file gen.py
    path = Path(__file__).parent.absolute()
    template = path / "template.tex"
    notebook = path / "notebook.tex"
    shutil.copyfile(template, notebook)
    change_team_name(notebook, team_name)


def remove_aux():
    """Remove the auxiliar files generated by pdflatex"""
    to_remove = [
        "notebook.aux",
        "notebook.log",
        "notebook.toc",
        "notebook.tex",
        "notebook.out",
        "texput.log",
    ]
    for item in to_remove:
        if os.path.exists(item):
            os.remove(item)


def valid_algo_section(section_name: str) -> bool:
    if section_name in ALGO_SECT_IGNORE:
        return False
    if not os.path.join(ALGO_PATH, section_name):
        return False

    return True


def validCode(file_name: str, valid_codes: list[str]):
    for extension in valid_codes:
        if file_name.endswith(extension):
            return True

    return False


def getAlgoSectionTex(section: str) -> str:
    return f"\\section{{{section.replace('-', ' ').capitalize()}}}\n"


def create_notebook(section):
    aux = ""
    print("Generating notebook...")
    with open(Path(__file__).parent.absolute() / "notebook.tex", "a") as texfile:
        for item, subsection in section:
            print("item: ", item, " subsection: ", subsection, flush=True)
            aux += getAlgoSectionTex(item)
            for file, fpath in subsection:
                file_name = file
                if item != "Settings and Macros":
                    # file_name = getName(file)
                    suffix = ""
                    if file.endswith(".py"):
                        suffix = " (Python)"
                    file_name, _ = os.path.splitext(file)

                    file_name = os.path.split(file_name)[1]
                    if "_" in file_name:
                        spt = "_"
                    else:
                        spt = "-"

                    file_name = " ".join(
                        [x[0].upper() + x[1:] for x in file_name.split(spt)]
                    )
                    file_name += suffix

                tex_path = fpath
                while tex_path[-1] != ".":
                    tex_path = tex_path[:-1]
                tex_path = tex_path[:-1]
                tex_path += ".tex"
                description = ""
                if os.path.isfile(tex_path):
                    with open(tex_path) as ftex:
                        description = ftex.read()

                print(
                    "file_name: ",
                    file_name,
                    " file_path: ",
                    fpath,
                    "description:",
                    description,
                    "textpath: ",
                    tex_path,
                    flush=True,
                )

                if description != "":
                    file_name = ""

                curinclude = "\\includes{%s}{%s}{%s}\n" % (
                    file_name,
                    fpath,
                    description,
                )
                if description == "":
                    description = "\\subsection{%s}\n" % file_name

                code_include = "\\lstinputlisting{%s}\n" % fpath

                aux += description
                aux += code_include

                # aux += curinclude

        aux += END_FLUSHLEFT
        aux += END_MULTICOLS
        aux += END_DOCUMENT

        texfile.write(aux)

    print("notebook.tex created !")


if __name__ == "__main__":
    cpy_template()
    section = get_dir()
    create_notebook(section)

    tex_path = Path(__file__).parent.absolute() / "notebook.tex"
    cmd = (CMD_GEN_PDF + tex_path.__str__()).split()
    with open(os.devnull, "w") as DEVNULL:
        try:
            subprocess.check_call(cmd)
            subprocess.check_call(cmd)
        except Exception:
            print("Error while converting LaTex to pdf.")
            print("You can run it manually to see the error.")
            print(cmd)
            exit(1)

    remove_aux()

    print("Notebook successfully created !")
